
Z1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001fc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  000001fc  00000290  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800068  00800068  00000298  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000298  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000304  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000075f  00000000  00000000  00000334  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000612  00000000  00000000  00000a93  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000308  00000000  00000000  000010a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000090  00000000  00000000  000013b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000397  00000000  00000000  00001440  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000235  00000000  00000000  000017d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001a0c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 33 00 	jmp	0x66	; 0x66 <__ctors_end>
   4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  28:	0c 94 66 00 	jmp	0xcc	; 0xcc <__vector_10>
  2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>

00000054 <__trampolines_end>:
  54:	c0 f9       	bld	r28, 0
  56:	a4 b0       	in	r10, 0x04	; 4
  58:	99 92       	st	Y+, r9
  5a:	82 f8       	bld	r8, 2
  5c:	80 98       	cbi	0x10, 0	; 16
  5e:	88 83       	st	Y, r24
  60:	c6 a1       	ldd	r28, Z+38	; 0x26
  62:	86 8e       	std	Z+30, r8	; 0x1e
  64:	ff 00       	.word	0x00ff	; ????

00000066 <__ctors_end>:
  66:	11 24       	eor	r1, r1
  68:	1f be       	out	0x3f, r1	; 63
  6a:	cf e5       	ldi	r28, 0x5F	; 95
  6c:	d8 e0       	ldi	r29, 0x08	; 8
  6e:	de bf       	out	0x3e, r29	; 62
  70:	cd bf       	out	0x3d, r28	; 61

00000072 <__do_copy_data>:
  72:	10 e0       	ldi	r17, 0x00	; 0
  74:	a0 e6       	ldi	r26, 0x60	; 96
  76:	b0 e0       	ldi	r27, 0x00	; 0
  78:	ec ef       	ldi	r30, 0xFC	; 252
  7a:	f1 e0       	ldi	r31, 0x01	; 1
  7c:	02 c0       	rjmp	.+4      	; 0x82 <__do_copy_data+0x10>
  7e:	05 90       	lpm	r0, Z+
  80:	0d 92       	st	X+, r0
  82:	a8 36       	cpi	r26, 0x68	; 104
  84:	b1 07       	cpc	r27, r17
  86:	d9 f7       	brne	.-10     	; 0x7e <__do_copy_data+0xc>

00000088 <__do_clear_bss>:
  88:	20 e0       	ldi	r18, 0x00	; 0
  8a:	a8 e6       	ldi	r26, 0x68	; 104
  8c:	b0 e0       	ldi	r27, 0x00	; 0
  8e:	01 c0       	rjmp	.+2      	; 0x92 <.do_clear_bss_start>

00000090 <.do_clear_bss_loop>:
  90:	1d 92       	st	X+, r1

00000092 <.do_clear_bss_start>:
  92:	a9 36       	cpi	r26, 0x69	; 105
  94:	b2 07       	cpc	r27, r18
  96:	e1 f7       	brne	.-8      	; 0x90 <.do_clear_bss_loop>
  98:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <main>
  9c:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <dodaj_cyfre>:
}

void dodaj_cyfre(uint8_t liczba) {
	uint8_t i;
	for(i = 0; i < 3; i++) {
		cyfry[i] = cyfry[i+1]; 
  a4:	e4 e6       	ldi	r30, 0x64	; 100
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	91 81       	ldd	r25, Z+1	; 0x01
  aa:	90 83       	st	Z, r25
  ac:	92 81       	ldd	r25, Z+2	; 0x02
  ae:	91 83       	std	Z+1, r25	; 0x01
  b0:	93 81       	ldd	r25, Z+3	; 0x03
  b2:	92 83       	std	Z+2, r25	; 0x02
	}
	cyfry[3] = liczba;
  b4:	83 83       	std	Z+3, r24	; 0x03
  b6:	28 e6       	ldi	r18, 0x68	; 104
  b8:	30 e0       	ldi	r19, 0x00	; 0
	for(i = 0; i < 4; i++) {
		if (cyfry[i] == 0 || cyfry[i] == 16) {
			cyfry[i] = 16;
  ba:	90 e1       	ldi	r25, 0x10	; 16
	for(i = 0; i < 3; i++) {
		cyfry[i] = cyfry[i+1]; 
	}
	cyfry[3] = liczba;
	for(i = 0; i < 4; i++) {
		if (cyfry[i] == 0 || cyfry[i] == 16) {
  bc:	80 81       	ld	r24, Z
  be:	8f 7e       	andi	r24, 0xEF	; 239
  c0:	21 f4       	brne	.+8      	; 0xca <dodaj_cyfre+0x26>
			cyfry[i] = 16;
  c2:	91 93       	st	Z+, r25
	uint8_t i;
	for(i = 0; i < 3; i++) {
		cyfry[i] = cyfry[i+1]; 
	}
	cyfry[3] = liczba;
	for(i = 0; i < 4; i++) {
  c4:	2e 17       	cp	r18, r30
  c6:	3f 07       	cpc	r19, r31
  c8:	c9 f7       	brne	.-14     	; 0xbc <dodaj_cyfre+0x18>
  ca:	08 95       	ret

000000cc <__vector_10>:


uint8_t cyfry[4] = {16, 16, 16, 16};
volatile uint8_t licznik = 0;
volatile uint8_t ostatni_stan[4] = {0xff, 0xff, 0xff, 0xff};
ISR(TIMER0_COMP_vect) {
  cc:	1f 92       	push	r1
  ce:	0f 92       	push	r0
  d0:	0f b6       	in	r0, 0x3f	; 63
  d2:	0f 92       	push	r0
  d4:	11 24       	eor	r1, r1
  d6:	2f 93       	push	r18
  d8:	3f 93       	push	r19
  da:	4f 93       	push	r20
  dc:	5f 93       	push	r21
  de:	6f 93       	push	r22
  e0:	7f 93       	push	r23
  e2:	8f 93       	push	r24
  e4:	9f 93       	push	r25
  e6:	af 93       	push	r26
  e8:	bf 93       	push	r27
  ea:	cf 93       	push	r28
  ec:	ef 93       	push	r30
  ee:	ff 93       	push	r31
	uint8_t w = 0xff;
	
	PORTD &= ~(1 << licznik+4);
  f0:	30 91 68 00 	lds	r19, 0x0068	; 0x800068 <__data_end>
  f4:	42 b3       	in	r20, 0x12	; 18
  f6:	3c 5f       	subi	r19, 0xFC	; 252
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	bc 01       	movw	r22, r24
  fe:	02 c0       	rjmp	.+4      	; 0x104 <__vector_10+0x38>
 100:	66 0f       	add	r22, r22
 102:	77 1f       	adc	r23, r23
 104:	3a 95       	dec	r19
 106:	e2 f7       	brpl	.-8      	; 0x100 <__vector_10+0x34>
 108:	9b 01       	movw	r18, r22
 10a:	20 95       	com	r18
 10c:	30 95       	com	r19
 10e:	24 23       	and	r18, r20
 110:	22 bb       	out	0x12, r18	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 112:	73 e0       	ldi	r23, 0x03	; 3
 114:	7a 95       	dec	r23
 116:	f1 f7       	brne	.-4      	; 0x114 <__vector_10+0x48>
 118:	00 00       	nop
	_delay_us(10);
	w = PIND | 0xf0;
 11a:	c0 b3       	in	r28, 0x10	; 16
 11c:	c0 6f       	ori	r28, 0xF0	; 240
	PORTD |= (1 << licznik+4);
 11e:	20 91 68 00 	lds	r18, 0x0068	; 0x800068 <__data_end>
 122:	32 b3       	in	r19, 0x12	; 18
 124:	2c 5f       	subi	r18, 0xFC	; 252
 126:	02 c0       	rjmp	.+4      	; 0x12c <__vector_10+0x60>
 128:	88 0f       	add	r24, r24
 12a:	99 1f       	adc	r25, r25
 12c:	2a 95       	dec	r18
 12e:	e2 f7       	brpl	.-8      	; 0x128 <__vector_10+0x5c>
 130:	83 2b       	or	r24, r19
 132:	82 bb       	out	0x12, r24	; 18
	
	uint8_t zmianastanu = (ostatni_stan[licznik] & ~w);
 134:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <__data_end>
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	e0 5a       	subi	r30, 0xA0	; 160
 13c:	ff 4f       	sbci	r31, 0xFF	; 255
 13e:	80 81       	ld	r24, Z
 140:	4c 2f       	mov	r20, r28
 142:	40 95       	com	r20
 144:	48 23       	and	r20, r24
	if (zmianastanu != 0x00) {
 146:	e9 f0       	breq	.+58     	; 0x182 <__vector_10+0xb6>
		uint8_t wLicznik = 0;
		while(zmianastanu != (1 << wLicznik))
 148:	50 e0       	ldi	r21, 0x00	; 0
 14a:	41 30       	cpi	r20, 0x01	; 1
 14c:	51 05       	cpc	r21, r1
 14e:	79 f0       	breq	.+30     	; 0x16e <__vector_10+0xa2>
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	61 e0       	ldi	r22, 0x01	; 1
 154:	70 e0       	ldi	r23, 0x00	; 0
		{
			wLicznik++;
 156:	9f 5f       	subi	r25, 0xFF	; 255
	PORTD |= (1 << licznik+4);
	
	uint8_t zmianastanu = (ostatni_stan[licznik] & ~w);
	if (zmianastanu != 0x00) {
		uint8_t wLicznik = 0;
		while(zmianastanu != (1 << wLicznik))
 158:	9b 01       	movw	r18, r22
 15a:	09 2e       	mov	r0, r25
 15c:	02 c0       	rjmp	.+4      	; 0x162 <__vector_10+0x96>
 15e:	22 0f       	add	r18, r18
 160:	33 1f       	adc	r19, r19
 162:	0a 94       	dec	r0
 164:	e2 f7       	brpl	.-8      	; 0x15e <__vector_10+0x92>
 166:	24 17       	cp	r18, r20
 168:	35 07       	cpc	r19, r21
 16a:	a9 f7       	brne	.-22     	; 0x156 <__vector_10+0x8a>
 16c:	01 c0       	rjmp	.+2      	; 0x170 <__vector_10+0xa4>
 16e:	90 e0       	ldi	r25, 0x00	; 0
		{
			wLicznik++;
		}
		uint8_t liczba = wLicznik*4+licznik;
 170:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__data_end>
 174:	99 0f       	add	r25, r25
 176:	99 0f       	add	r25, r25
 178:	89 0f       	add	r24, r25
		if(liczba <= 9) {
 17a:	8a 30       	cpi	r24, 0x0A	; 10
 17c:	10 f4       	brcc	.+4      	; 0x182 <__vector_10+0xb6>
			dodaj_cyfre(liczba);
 17e:	0e 94 52 00 	call	0xa4	; 0xa4 <dodaj_cyfre>
		}
		
	}
	
	PORTA = pgm_read_byte(&(tablicaznakow[cyfry[licznik]]));
 182:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <__data_end>
 186:	f0 e0       	ldi	r31, 0x00	; 0
 188:	ec 59       	subi	r30, 0x9C	; 156
 18a:	ff 4f       	sbci	r31, 0xFF	; 255
 18c:	e0 81       	ld	r30, Z
 18e:	f0 e0       	ldi	r31, 0x00	; 0
 190:	ec 5a       	subi	r30, 0xAC	; 172
 192:	ff 4f       	sbci	r31, 0xFF	; 255
 194:	e4 91       	lpm	r30, Z
 196:	eb bb       	out	0x1b, r30	; 27
	
	
	ostatni_stan[licznik] = w;
 198:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <__data_end>
 19c:	f0 e0       	ldi	r31, 0x00	; 0
 19e:	e0 5a       	subi	r30, 0xA0	; 160
 1a0:	ff 4f       	sbci	r31, 0xFF	; 255
 1a2:	c0 83       	st	Z, r28
	licznik = (licznik+1) & 0b00000011;
 1a4:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__data_end>
 1a8:	8f 5f       	subi	r24, 0xFF	; 255
 1aa:	83 70       	andi	r24, 0x03	; 3
 1ac:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__data_end>
}
 1b0:	ff 91       	pop	r31
 1b2:	ef 91       	pop	r30
 1b4:	cf 91       	pop	r28
 1b6:	bf 91       	pop	r27
 1b8:	af 91       	pop	r26
 1ba:	9f 91       	pop	r25
 1bc:	8f 91       	pop	r24
 1be:	7f 91       	pop	r23
 1c0:	6f 91       	pop	r22
 1c2:	5f 91       	pop	r21
 1c4:	4f 91       	pop	r20
 1c6:	3f 91       	pop	r19
 1c8:	2f 91       	pop	r18
 1ca:	0f 90       	pop	r0
 1cc:	0f be       	out	0x3f, r0	; 63
 1ce:	0f 90       	pop	r0
 1d0:	1f 90       	pop	r1
 1d2:	18 95       	reti

000001d4 <main>:
	}
}

int main(void)
{
	DDRA = 0xFF;
 1d4:	8f ef       	ldi	r24, 0xFF	; 255
 1d6:	8a bb       	out	0x1a, r24	; 26
	
	DDRA = 0xff;
 1d8:	8a bb       	out	0x1a, r24	; 26
	DDRD = 0xf0;
 1da:	90 ef       	ldi	r25, 0xF0	; 240
 1dc:	91 bb       	out	0x11, r25	; 17
	PORTD = 0xff;
 1de:	82 bb       	out	0x12, r24	; 18
	
	DDRB = 0xff;
 1e0:	87 bb       	out	0x17, r24	; 23
	
	//			prescaler 64			tryb CTC
	TCCR0 |= (1 << CS00) | (1 << CS01) | (1 << WGM01);
 1e2:	83 b7       	in	r24, 0x33	; 51
 1e4:	8b 60       	ori	r24, 0x0B	; 11
 1e6:	83 bf       	out	0x33, r24	; 51
	OCR0 = 195;//125ms
 1e8:	83 ec       	ldi	r24, 0xC3	; 195
 1ea:	8c bf       	out	0x3c, r24	; 60
	
	//Aktywacja przerwania TIMER0_COMP_vect
	TIMSK |= (1 << OCIE0);
 1ec:	89 b7       	in	r24, 0x39	; 57
 1ee:	82 60       	ori	r24, 0x02	; 2
 1f0:	89 bf       	out	0x39, r24	; 57
	
	//Globalna aktywacja przerwa?
	sei();
 1f2:	78 94       	sei
	
	while (1)
	{
		asm("nop");
 1f4:	00 00       	nop
 1f6:	fe cf       	rjmp	.-4      	; 0x1f4 <main+0x20>

000001f8 <_exit>:
 1f8:	f8 94       	cli

000001fa <__stop_program>:
 1fa:	ff cf       	rjmp	.-2      	; 0x1fa <__stop_program>
